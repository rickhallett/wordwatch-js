{"version":3,"sources":["logo.svg","components/Header.js","components/TopicElement.js","components/WordCloud.js","components/MetaCloud.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","src","logo","alt","href","target","rel","TopicElement","topic","onWordSelect","onWordSelectHandler","h1","data-testid","onClick","label","h2","h3","h4","h5","h6","sentimentScore","volume","WordCloud","willShuffle","data","topics","sort","Math","random","map","i","id","MetaCloud","activeTopic","sentiment","positive","neutral","negative","App","useState","setActiveTopic","setWillShuffle","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.658871e5.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import '../css/components/component.header.css';\nimport logo from '../logo.svg';\n\nexport const Header = () => {\n  return (\n    <header className=\"app__header\">\n      <img src={logo} className=\"header__logo\" alt=\"logo\" />\n\n      <a\n        className=\"header__title\"\n        href=\"https://www.brandwatch.com/\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        <h1 className=\"header__title\">Wordwatch.js</h1>\n      </a>\n    </header>\n  );\n};\n","import '../css/components/component.topicelement.css';\n\nexport const TopicElement = ({ topic, onWordSelect }) => {\n  const onWordSelectHandler = (topic) => {\n    onWordSelect(topic);\n  };\n\n  const h1 = (\n    <h1\n      data-testid=\"topic-element-h1\"\n      onClick={() => onWordSelectHandler(topic)}\n    >\n      {topic.label}\n    </h1>\n  );\n\n  const h2 = (\n    <h2\n      data-testid=\"topic-element-h2\"\n      onClick={() => onWordSelectHandler(topic)}\n    >\n      {topic.label}\n    </h2>\n  );\n\n  const h3 = (\n    <h3\n      data-testid=\"topic-element-h3\"\n      onClick={() => onWordSelectHandler(topic)}\n    >\n      {topic.label}\n    </h3>\n  );\n\n  const h4 = (\n    <h4\n      data-testid=\"topic-element-h4\"\n      onClick={() => onWordSelectHandler(topic)}\n    >\n      {topic.label}\n    </h4>\n  );\n\n  const h5 = (\n    <h5\n      data-testid=\"topic-element-h5\"\n      onClick={() => onWordSelectHandler(topic)}\n    >\n      {topic.label}\n    </h5>\n  );\n\n  const h6 = (\n    <h6\n      data-testid=\"topic-element-h6\"\n      onClick={() => onWordSelectHandler(topic)}\n    >\n      {topic.label}\n    </h6>\n  );\n\n  const getHeadingElement = () => {\n    if (topic.volume >= 50) {\n      return h1;\n    } else if (topic.volume >= 40 && topic.volume < 50) {\n      return h2;\n    } else if (topic.volume >= 30 && topic.volume < 40) {\n      return h3;\n    } else if (topic.volume >= 20 && topic.volume < 30) {\n      return h4;\n    } else if (topic.volume >= 10 && topic.volume < 20) {\n      return h5;\n    } else if (topic.volume >= 0 && topic.volume < 10) {\n      return h6;\n    } else {\n      return null;\n    }\n  };\n\n  const getSentimentColourClass = () => {\n    if (topic.sentimentScore > 75) return 'topic-element--positive';\n    if (topic.sentimentScore > 50) return 'topic-element--neutral';\n    if (topic.sentimentScore < 50) return 'topic-element--negative';\n  };\n\n  return (\n    <div\n      className={`topic-element ${getSentimentColourClass()}`}\n      data-testid=\"topic-element\"\n    >\n      {getHeadingElement(topic)}\n    </div>\n  );\n};\n","import '../css/components/component.wordcloud.css';\nimport { TopicElement } from './TopicElement';\nimport data from '../topics.json';\n\nexport const WordCloud = ({ onWordSelect, willShuffle }) => {\n  const onWordSelectHandler = (topic) => {\n    onWordSelect(topic);\n  };\n\n  if (willShuffle) {\n    data.topics.sort(() => Math.random() - 0.5);\n  }\n\n  return (\n    <div className=\"wordcloud\" data-testid=\"wordcloud\">\n      {data.topics.map((topic, i) => (\n        <TopicElement\n          key={topic.id}\n          topic={topic}\n          onWordSelect={() => onWordSelectHandler(topic)}\n        />\n      ))}\n    </div>\n  );\n};\n","import '../css/components/component.metacloud.css';\n\nexport const MetaCloud = ({ activeTopic }) => {\n  return (\n    <div className=\"metacloud\">\n      <div className=\"metacloud__row\">\n        <div>Info on topic: </div>\n        <div data-testid=\"active-topic-label\" className=\"bold\">\n          {activeTopic.label}\n        </div>\n      </div>\n      <div className=\"metacloud__row\">\n        Total mentions: <div className=\"bold\">{activeTopic.volume}</div>\n      </div>\n      <div className=\"metacloud__row\">\n        Positive mentions:{' '}\n        <div className=\"bold\">{activeTopic.sentiment.positive || 0}</div>\n      </div>\n      <div className=\"metacloud__row\">\n        Neutral mentions:{' '}\n        <div className=\"bold\">{activeTopic.sentiment.neutral || 0}</div>\n      </div>\n      <div\n        className=\"\n        metacloud__row\"\n      >\n        Negative mentions:{' '}\n        <div className=\"bold\">{activeTopic.sentiment.negative || 0}</div>\n      </div>\n    </div>\n  );\n};\n","import { useState } from 'react';\nimport './css/components/component.app.css';\nimport './css/generic/generic.resets.css';\nimport './css/elements/elements.elements.css';\nimport './css/utilities/utilities.helpers.css';\nimport { Header } from './components/Header';\nimport { WordCloud } from './components/WordCloud';\nimport { MetaCloud } from './components/MetaCloud';\nimport data from './topics.json';\n\nfunction App() {\n  const [activeTopic, setActiveTopic] = useState(data.topics[0]);\n  const [willShuffle, setWillShuffle] = useState(true);\n\n  const onWordSelectHandler = (topic) => {\n    setWillShuffle(false);\n    setActiveTopic(topic);\n  };\n\n  return (\n    <div className=\"app\">\n      <Header />\n      <div className=\"app__main\">\n        <div className=\"app__wordcloud-container\">\n          <WordCloud\n            onWordSelect={(topic) => onWordSelectHandler(topic)}\n            willShuffle={willShuffle}\n          />\n        </div>\n        <div className=\"app__metacloud-container\">\n          <MetaCloud activeTopic={activeTopic} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}